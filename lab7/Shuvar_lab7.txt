; task 1: MIN
(defun minimum (lst)
	(cond ((null (cdr lst)) (car lst))
		((< (car lst) (minimum (cdr lst))) (car lst))
		((minimum (cdr lst)))
	)
)
(princ "task 1 MIN: ")
(print (minimum '(9 2 5 6 1)))
(terpri)

; task 1: MAX
(defun maximum (lst)
	(cond ((null (cdr lst)) (car lst))
		((> (car lst) (maximum (cdr lst))) (car lst))
		((maximum (cdr lst)))
	)
)
(princ "task 1 MAX: ")
(print (maximum '(9 2 5 6 1)))
(terpri)

; task 1: INCR
(defun incr (lst)
	(cond ((null (cdr lst)) T)
		((and (< (car lst) (car (cdr lst))) (incr (cdr lst))))
	)
)

(princ "task 1 INCR: ")
(print (incr '(1 9 5)))
(terpri)

; task 1: DECR
(defun decr (lst)
	(cond ((null (cdr lst)) T)
		((and (> (car lst) (car (cdr lst))) (decr (cdr lst))))
	)
)

(princ "task 1 DECR: ")
(print (decr '(10 9 5)))
(terpri)

; task2 a)суму елементів
(defun el-sum (lst)
    (cond ((null lst) 0)
          ((atom lst) 0)
          ((+ (car lst) (el-sum (cdr lst))))
    )
)

(princ "task 2 сума елементів: ")
(print (el-sum '(10 9 5)))
(terpri)

; task 2: б) кількість елементів 

(defun count-len (lst)
(cond ((null lst) 0)
        ((atom lst) 0)
        ((+ 1 (count-len (cdr lst))))
	)
)

(princ "task 2  кількість елементів: ")
(print (count-len '(1 3 5 6 (7 8))))
(terpri)

; task 2: в) кількість підсписків 
(defun count-sublists (lst)
    (cond ((null lst) 0)
        ((atom lst) 0)
        ((atom (car lst)) (count-sublists (cdr lst)))
        ((+ 1
			(count-sublists (car lst))
			(count-sublists (cdr lst)))
		)
	)
)

(princ "task 2  кількість підсписків: ")
(PRINT (count-sublists '(1 (2) (4 (4 5))) ))
(terpri)
(PRINT (count-sublists '(1 (2) (4 (6 (5 6 7))) (3)) ))
(terpri)

; task 2: г) лінеризує список
(defun linealization (lst)
    (cond
        ((null lst) NIL)
        ((listp (car lst)) (append (linealization (car lst)) (linealization (cdr lst))))
        ((atom (car lst)) (cons (car lst) (linealization (cdr lst))))
    )
)

(princ "task 2 лінеризує список: ")
(print(linealization '(2 4 9 (7 3 9) (2 1) 84)))
(terpri)

; task 3: a) (DIVIS x y) — повертає частку та остачу від ділення x на y. Повернути результат  у вигляді конса. Не використовувати функцій ділення та остачі.
(defun divis (x y)
	(cond ((EQL y 0) (return-from divis "Can't divide by zero"))
	      ((< x y) (cons 0 x))
	)
	(setq k 0)
	(loop while (>= x y)
		do
		(setq k (+ k 1))
		(setq x (- x y)))
	(cons k x)
) 

(princ "task 3 частка та остачу від ділення x на y: ")
(print (divis 5 0))
(terpri)
(print (divis 5 3))
(terpri)
(print (divis 4 2))
(terpri)

; task 3: б)(POW x y) — x в степені y. Запропонувати алгоритми з часовою оцінкою O(y) та O(log y).
(defun power1 (x y)
            (cond ((EQL y 0) 1)
                ((* x (power1 x (- y 1))))
            )
)

(princ "task 3 x в степені y O(y): ")
(print (power1 5 3))
(terpri)

(defun power2 (x y)
  (cond ((EQL y 0) 1)
        ((evenp y)
         (setq c (power2 x (/ y 2)))
           (* c c))
        ((oddp y)
         (setq c (power2 x (/ (- y 1) 2)))
           (* x c c)
        )
    )
)

(princ "task 3 x в степені y O(log y): ")
(print (power2 5 3))
(terpri)

; task 4:  (BINARY n) – кількість знаків у двійковому представленні числа n.
(defun BINARY (N)      
    (loop with res = 0
        if (evenp n) do (setq res (+ 1 res))
        else do (setq res (+ 1 res)) and do (setq n (- n 1))
        do (SETF n (/ n 2))

        until (EQL n 0)
        finally (return res)
    )
)

(princ "task 4 кількість знаків у двійковому представленні числа: ")
(PRINT(BINARY 19))
(terpri)

;task4: (EQ2 a b c) – розв’язати квадратне рівняння
(DEFUN EQ2 (a b c)
  (setq d (- (* b b) (* a c 4)))
    (cond ((< d 0) '())
          ((eql d 0) (/ ( - b) (* 2 a)))
          ((cons (/ (- (* b -1) (SQRT d)) (* 2 a))
                   (/ (+ (* b -1) (SQRT d)) (* 2 a))))))
(princ "task 4 розв’язати квадратне рівняння: ")
(PRINT(EQ2  1 -5 6))
(terpri)

; task 8:  (MATR_GET m i j) – повернути значення m[i][j], де m – матриця n * n, i<=n, j<=n..
(defun MATR_GET (m i j)
                   (loop while (> i 0)
                         do( setq i (- i 1) m (cdr m))) (setq m (car m))
                   (loop while (> j 0)
                         do (setq j (- j 1) m (cdr m)))
                   (car m))

(princ "task 8 повернути значення m[i][j]: ")
(PRINT(MATR_GET '((1 3 4) (4 5 6) (7 8 9)) 2 1))
(terpri)

; task 8:  (GENMATR0 i j) – згенерувати нульову матрицю i * j.
(DEFUN GENROW0 (n)
    (cond
        ((eql n 0) nil)
        ((cons 0 (GENROW0 (- n 1))))
    )
)

(defun GENMATR0 (i j) (setq m '() row (GENROW0 j))
                   (loop while (> i 0)
                         do ( setq i (- i 1) m (cons row m)))
                   m)

(princ "task 8 згенерувати нульову матрицю i * j: ")
(PRINT(GENMATR0 2 4))
(terpri)	


; task 8:  (MATR_CHANGE m i j value) – повернути матрицю, у якій m[i][j]=value.

(defun replace-nth (n lst new)
    (cond
        ((null lst)(list new))
        ((eql n 0) (cons new (cdr lst)))
        ((> n 0) (cons (car lst)
            (replace-nth (- n 1)(cdr lst) new)))
        ((error "Unhandled values.")))
        )

(defun MATR_CHANGE (m i j value)
    (setq mm m)
    (setq ii i)
    (loop while (> i 0)
                do( setq i (- i 1) mm (cdr mm)))
    (replace-nth ii m (replace-nth j (car mm) value))
    )
    

(princ "task 8 повернути матрицю, у якій m[i][j]=value: ")
(setq data '((a b c) (d e f) (g h ij)))
(setq data (MATR_CHANGE data 1 2 pi))
(print data)
(terpri)


